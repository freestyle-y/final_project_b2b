<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.trade.mapper.ProductMapper">

	<!-- 상품 후기 -->
	<select id="reviewList" resultType="map">
		SELECT 
			u.name,
			o.product_name AS productName,
			o.option_name_value AS optionNameValue,
			o.review,
			o.grade
		FROM `order` o
		INNER JOIN user u
			ON o.user_id = u.id
		WHERE review IS NOT NULL 
	</select>

	<!-- 상품 목록(찜 많은순) -->
	<select id="productListByWish" resultType="map">
		SELECT
			p.product_no AS productNo,
		    p.product_name AS productName,
		    p.product_status AS productStatus,
		    IFNULL(w.wish_count, 0) AS wishCount
		FROM 
		    product p
		LEFT JOIN (
		    SELECT 
		        product_no, 
		        COUNT(*) AS wish_count
		    FROM 
		        wish_list
		    WHERE 
		        use_status = 'Y'
		    GROUP BY 
		        product_no
		) w ON p.product_no = w.product_no
		WHERE 
		    p.use_status = 'Y'
		AND (p.product_status = 'GS002' OR p.product_status = 'GS003')
		GROUP BY 
		    p.product_no
		ORDER BY 
		    wish_count DESC
		LIMIT 0, 10
	</select>

	<!-- 개인 찜 목록 보기 -->
	<select id="wishList" parameterType="String" resultType="map">
		SELECT 
			p.product_no AS productNo, 
		    p.product_name AS productName, 
		    c.category_name AS categoryName, 
		    p.use_status AS productUseStatus,
		    p.product_status AS productStatus
		FROM wish_list w
		INNER JOIN product p
		    ON w.product_no = p.product_no
		INNER JOIN category c
			 ON p.category_id = c.category_id
		WHERE w.user_id = #{id}
		  AND w.use_status = 'Y'
		GROUP BY p.product_no;
	</select>
	
	<!-- 개인 장바구니 목록 보기 -->
	<select id="shoppingCart" parameterType="String" resultType="map">
		SELECT
			sc.shopping_cart_no AS cartId,
			sc.user_id AS userId,
			p.product_no AS productNo, 
			p.option_no AS optionNo,
			p.product_name AS productName,
			o.option_name_value AS optionNameValue,
			sc.quantity,
			i.quantity AS inventoryQuantity,
			CASE p.product_status
		        WHEN 'GS001' THEN '판매대기'
		        WHEN 'GS002' THEN '판매중'
		        WHEN 'GS003' THEN '일시품절'
		        WHEN 'GS004' THEN '영구중단'
		        ELSE '알수없음'
		    END AS productStatus,
			p.price,
			p.use_status AS useStatus
		FROM shopping_cart sc
		INNER JOIN product p
			ON sc.product_no = p.product_no
			AND sc.option_no = p.option_no
		INNER JOIN `option` o
			ON p.option_no = o.option_no
		LEFT JOIN inventory i
			ON p.product_no = i.product_no
			AND p.option_no = i.option_no
		WHERE sc.user_id = #{id}
			AND sc.use_status = 'Y'
	</select>
	
	<!-- 장바구니 아이디로 상품id, 옵션id 찾기 -->
	<select id="findProductAndOptionByCartId" resultType="map">
	    SELECT product_no AS productNo, option_no AS optionNo
	    FROM shopping_cart
	    WHERE shopping_cart_no = #{cartId}
	</select>
	
	<!-- 장바구니에 이미 상품이 담겨있는지 확인 -->
	<select id="checkCart" parameterType="map" resultType="int">
	    SELECT COUNT(*) 
	    FROM shopping_cart
	    WHERE user_id = #{userId}
	      AND product_no = #{productNo}
	      AND option_no = #{optionNo}
	      AND use_status = 'Y'
	</select>
	
	
	<!-- 재고 조회 -->
	<select id="findInventoryQuantity" resultType="int">
	    SELECT quantity
	    FROM inventory
	    WHERE product_no = #{productNo} AND option_no = #{optionNo}
	</select>
	
	<!-- 카테고리(대분류) 목록 -->
	<select id="majorCategory" resultType="com.example.trade.dto.Category">
		SELECT
			category_id AS categoryId,
			category_name AS categoryName
		FROM category
		WHERE parent_category = '0'
	</select>
	
	<!-- 카테고리(중분류) 목록 -->
	<select id="middleCategory" parameterType="String" resultType="com.example.trade.dto.Category">
		SELECT
			category_id AS categoryId,
			category_name AS categoryName
		FROM category
		WHERE parent_category = #{id}
	</select>
	
	<!-- 카테고리별 상품 목록 보기(판매중, 일시품절만) -->
	<select id="productListByCategory" parameterType="String" resultType="map">
		WITH category_path AS (
		    SELECT 
		        c1.category_id AS category_id,
		        CASE 
		            WHEN c3.category_id IS NOT NULL THEN c3.category_id
		            WHEN c2.category_id IS NOT NULL THEN c2.category_id
		            ELSE c1.category_id
		        END AS category_id_lv1,
		
		        CASE 
		            WHEN c3.category_id IS NOT NULL THEN c2.category_id
		            WHEN c2.category_id IS NOT NULL THEN c1.category_id
		            ELSE NULL
		        END AS category_id_lv2,
		
		        CASE 
		            WHEN c3.category_id IS NOT NULL THEN c1.category_id
		            ELSE NULL
		        END AS category_id_lv3
		    FROM category c1
		    LEFT JOIN category c2 ON c1.parent_category = c2.category_id
		    LEFT JOIN category c3 ON c2.parent_category = c3.category_id
		)
		SELECT 
		    p.product_no AS productNo,
		    p.product_name AS productName,
		    p.price,
		    CASE p.product_status
		        WHEN 'GS001' THEN '판매대기'
		        WHEN 'GS002' THEN '판매중'
		        WHEN 'GS003' THEN '일시품절'
		        WHEN 'GS004' THEN '영구중단'
		        ELSE '알수없음'
		    END AS productStatus,
		    cp.category_id_lv1 AS categoryIdLv1,
		    cp.category_id_lv2 AS categoryIdLv2,
		    cp.category_id_lv3 AS categoryIdLv3
		FROM product p
		LEFT JOIN category_path cp 
			ON p.category_id = cp.category_id
		WHERE p.use_status = 'Y'
			AND (p.product_status = 'GS002' OR p.product_status = 'GS003')
		AND (#{parentId} IS NULL OR category_id_lv1 = #{parentId})
		AND (#{middleId} IS NULL OR category_id_lv2 = #{middleId})
		GROUP BY product_no
	</select>
	
	<!-- 카테고리별 상품 목록 보기(전체) -->
	<select id="allProductListByCategory" parameterType="String" resultType="map">
		WITH category_path AS (
		    SELECT 
		        c1.category_id AS category_id,
		        CASE 
		            WHEN c3.category_id IS NOT NULL THEN c3.category_id
		            WHEN c2.category_id IS NOT NULL THEN c2.category_id
		            ELSE c1.category_id
		        END AS category_id_lv1,
		
		        CASE 
		            WHEN c3.category_id IS NOT NULL THEN c2.category_id
		            WHEN c2.category_id IS NOT NULL THEN c1.category_id
		            ELSE NULL
		        END AS category_id_lv2,
		
		        CASE 
		            WHEN c3.category_id IS NOT NULL THEN c1.category_id
		            ELSE NULL
		        END AS category_id_lv3
		    FROM category c1
		    LEFT JOIN category c2 ON c1.parent_category = c2.category_id
		    LEFT JOIN category c3 ON c2.parent_category = c3.category_id
		)
		SELECT 
		    p.product_no AS productNo,
		    p.product_name AS productName,
		    p.price,
		    p.use_status AS useStatus,
		    CASE p.product_status
		        WHEN 'GS001' THEN '판매대기'
		        WHEN 'GS002' THEN '판매중'
		        WHEN 'GS003' THEN '일시품절'
		        WHEN 'GS004' THEN '영구중단'
		        ELSE '알수없음'
		    END AS productStatus,
		    cp.category_id_lv1 AS categoryIdLv1,
		    cp.category_id_lv2 AS categoryIdLv2,
		    cp.category_id_lv3 AS categoryIdLv3
		FROM product p
		LEFT JOIN category_path cp 
			ON p.category_id = cp.category_id
		AND (#{parentId} IS NULL OR category_id_lv1 = #{parentId})
		AND (#{middleId} IS NULL OR category_id_lv2 = #{middleId})
		GROUP BY product_no
	</select>
	
	<!-- 상품 상세 페이지 보기 -->
	<select id="productOne" resultType="map">
		SELECT
		    p.product_no AS productNo,
		    p.product_name AS productName,
		    o.option_no AS optionNo,
		    o.option_name_value AS optionNameValue,
		    p.price,
		    i.quantity,
		   	w.use_status AS wishUseStatus
		FROM product p
		INNER JOIN `option` o 
			ON p.option_no = o.option_no
		LEFT JOIN inventory i 
			ON i.product_no = p.product_no 
			AND i.option_no = p.option_no
		LEFT JOIN wish_list w 
			ON w.product_no = p.product_no 
			AND w.user_id = #{id}
		WHERE p.product_no = #{productNo}
	</select>
	
	<!-- 찜 테이블에 데이터 있는지 확인 -->
	<select id="checkWishExists" resultType="int">
	    SELECT COUNT(*)
	    FROM wish_list
	    WHERE user_id = #{userId}
			AND product_no = #{productNo}
	</select>
	
	<!-- 상품별 리뷰 보기 -->
	<select id="productReview" parameterType="int" resultType="map">
		SELECT 
			u.name,
			o.product_name AS productName,
			o.option_name_value AS optionNameValue,
			o.review,
			o.grade
		FROM `order` o
		INNER JOIN user u
			ON o.user_id = u.id
		WHERE review IS NOT NULL
			AND o.product_no = #{productNo}
		order BY grade DESC
	</select>
	
	<!-- 상품별 평균 평점 -->
	<select id="avgProductRate" parameterType="int" resultType="double">
		SELECT AVG(grade) AS avgGrade
		FROM `order`
		WHERE product_no = #{productNo}
	</select>
	
	<!-- 기업회원 배송지 -->
	<select id="bizAddress" parameterType="String" resultType="com.example.trade.dto.Address">
		SELECT 
			address_no AS addressNo,
			postal,
			address,
			detail_address AS detailAddress,
			main_address AS mainAddress
		FROM address
		WHERE user_id = #{id}
	</select>
	
	<!-- 대분류 최대 ID 조회 -->
	<select id="selectMaxMajorCategoryId" resultType="String">
		SELECT MAX(CAST(category_id AS UNSIGNED)) 
	    FROM category 
	    WHERE parent_category = '0'
	</select>
	
	<!-- 중분류, 소분류 최대 ID 조회 -->
	<select id="selectMaxSubCategoryId" parameterType="String" resultType="String">
		SELECT MAX(category_id)
	    FROM category
	    WHERE parent_category = #{parentId}
	</select>
	
	<!-- 옵션 목록 -->
	<select id="optionList" resultType="com.example.trade.dto.Option">
		SELECT
			option_no AS optionNo,
			option_name AS optionName,
			option_name_value AS optionNameValue
		FROM `option`
	</select>
	
	<!-- 상품 번호 찾기 -->
	<select id="findProductNoByName" resultType="int">
	    SELECT product_no
	    FROM product
	    WHERE product_name = #{productName}
	    LIMIT 1
	</select>
	
	<!-- 상품 최대 번호 찾기 -->
	<select id="findMaxProductNo" resultType="int">
	    SELECT MAX(product_no)
	    FROM product
	</select>
	
	<!-- 재고 목록 조회 -->
	<select id="inventoryList" resultType="map">
		SELECT
			i.inventory_id AS inventoryId,
			p.product_no AS productNo,
			p.option_no AS optionNo,
			i.address_no AS addressNo,
			p.product_name AS productName,
			o.option_name_value AS optionNameValue,
			p.price,
			i.quantity,
			a.postal,
			a.address,
			a.detail_address AS detailAddress
		FROM inventory i
		INNER JOIN product p
			ON i.product_no = p.product_no
			AND i.option_no = p.option_no
		INNER JOIN `option` o
			ON o.option_no = p.option_no
		INNER JOIN address a
			ON i.address_no = a.address_no
	</select>
	
	<!-- 찜 테이블에 찜 삽입 -->
	<insert id="insertWish">
		INSERT INTO wish_list (user_id, product_no, use_status, create_user)
	    VALUES (#{userId}, #{productNo}, #{useStatus}, #{userId})
	</insert>
	
	<!-- 장바구니에 담기 -->
	<insert id="insertCart" parameterType="map">
	    INSERT INTO shopping_cart (user_id, product_no, option_no, quantity, create_user, use_status)
	    VALUES (#{userId}, #{productNo}, #{optionNo}, #{quantity}, #{userId}, 'Y')
	</insert>
	
	<!-- 상품 요청 입력 -->
	<insert id="insertProductRequest" parameterType="com.example.trade.dto.ProductRequest" useGeneratedKeys="true" keyProperty="productRequestNo" keyColumn="product_request_no">
		INSERT INTO product_request(product_request_no, sub_product_request_no, address_no, product_name,
				product_option, product_quantity, requests, create_user, use_status)
		VALUES (#{productRequestNo}, #{subProductRequestNo}, #{addressNo}, #{productName},
				#{productOption}, #{productQuantity}, #{requests}, #{createUser}, #{useStatus}
				)
	</insert>
	
	<!-- 카테고리 추가 -->
	<insert id="insertCategory" parameterType="com.example.trade.dto.Category">
		INSERT INTO category (
			category_id, parent_category, category_name,
			create_user, use_status)
		VALUES (
			#{categoryId}, #{parentCategory}, #{categoryName},
			#{createUser}, 'Y')
	</insert>

	<!-- 옵션 추가 -->
	<insert id="insertOption" parameterType="com.example.trade.dto.Option">
		INSERT INTO `option`(
			option_name, option_name_value, create_user, use_status)
		VALUES (
			#{optionName}, #{optionNameValue}, #{createUser}, 'Y')
	</insert>

	<!-- 상품 추가 -->
	<insert id="insertProduct" parameterType="com.example.trade.dto.Product">	
		INSERT INTO product(
			product_no, option_no, product_name, product_status,
			category_id, price, create_user, use_status)
		VALUES (
			#{productNo}, #{optionNo}, #{productName}, 'GS002',
			#{categoryId}, #{price}, #{createUser}, 'Y')
	</insert>
	
	<!-- 찜 삭제 -->
	<update id="deleteByUserNameAndProductNos">
		UPDATE wish_list
		SET use_status = 'N',
			update_user = 'personal001',
			update_date = NOW()
		WHERE user_id = #{userName}
		AND product_no IN
		    <foreach item="productNo" collection="productNoList" open="(" separator="," close=")">
		        #{productNo}
		    </foreach>
	</update>
	
	<!-- 개인 장바구니 수량 변경 -->
	<update id="updateCartQuantity" parameterType="map">
	    UPDATE shopping_cart
	    SET quantity = #{quantity},
	    	update_user = #{userId},
	    	update_date = NOW()
	    WHERE shopping_cart_no = #{shoppingCartNo}
	</update>

	<!-- 개인 장바구니 상품 삭제 -->
	<update id="deleteCartItemById" parameterType="map">
		UPDATE shopping_cart
		SET use_status = 'N',
			update_user = #{userId},
	    	update_date = NOW()
		WHERE shopping_cart_no = #{cartId}
	</update>
	
	<!-- 찜 삭제/등록(하나만) -->
	<update id="updateWishStatus" parameterType="map">
		UPDATE wish_list
	    SET use_status = #{useStatus},
	        update_user = #{userId},
	        update_date = NOW()
	    WHERE user_id = #{userId}
	      AND product_no = #{productNo}
	</update>
	
	
	<!-- 재고 수정 -->
	<update id="updateInventoryQuantity">
		UPDATE inventory
	    SET quantity = #{quantity}
	    WHERE inventory_id = #{inventoryId}
	</update>
	
	<!-- 상품 사용여부 변경 -->
	<update id="updateProductStatus">
		UPDATE product
	    SET use_status = #{useStatus},
	    	update_user = #{userId},
	    	update_date = NOW()
	    WHERE product_no = #{productNo}
	</update>
</mapper>