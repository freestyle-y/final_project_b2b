<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.trade.mapper.OrderMapper">
	<!-- 주문 번호로 주문 목록 조회 + 주소 조인 -->
	<select id="getOrderList" resultType="com.example.trade.dto.Order">
	    SELECT
	        o.order_no             AS orderNo,
	        o.sub_order_no         AS subOrderNo,
	        o.parent_sub_order_no  AS parentSubOrderNo,
	        o.user_id              AS userId,
	        o.address_no           AS addressNo,
	        a.address			   AS address,
	        a.detail_address       AS detailAddress,
	        o.delivery_request     AS deliveryRequest,
	        o.product_no           AS productNo,
	        o.product_name         AS productName,
	        o.option_no            AS optionNo,
	        o.option_name          AS optionName,
	        o.option_name_value    AS optionNameValue,
	        o.order_quantity       AS orderQuantity,
	        o.price                AS price,
	        o.payment_type         AS paymentType,
	        o.payment_time         AS paymentTime,
	        o.return_quantity      AS returnQuantity,
	        o.return_reason        AS returnReason,
	        o.return_request_time  AS returnRequestTime,
	        o.return_end_time      AS returnEndTime,
	        o.exchange_quantity    AS exchangeQuantity,
	        o.exchange_reason      AS exchangeReason,
	        o.exchange_request_time AS exchangeRequestTime,
	        o.exchange_end_time    AS exchangeEndTime,
	        o.return_delivery_method AS returnDeliveryMethod,
	        o.order_status         AS orderStatus,
	        o.delivery_status      AS deliveryStatus,
	        o.order_time           AS orderTime,
	        o.order_reward         AS orderReward,
	        o.order_reward_status  AS orderRewardStatus,
	        o.review               AS review,
	        o.grade                AS grade,
	        o.review_reward        AS reviewReward,
	        o.review_reward_status AS reviewRewardStatus,
	        o.create_user          AS createUser,
	        o.create_date          AS createDate,
	        o.update_user          AS updateUser,
	        o.update_date          AS updateDate,
	        o.use_status           AS useStatus,
	        a.main_address		   AS mainAddress
	    FROM `order` o INNER JOIN address a ON o.address_no = a.address_no
	    WHERE order_no = #{orderNo}
	</select>
	
	<!-- 회원 적립금 가져오기 -->
	<select id="getReward" resultType="int">
		SELECT 
		    IFNULL(SUM(o.order_reward + o.review_reward), 0) - IFNULL(SUM(rh.reward_use), 0) AS reward
		FROM `order` o
		LEFT JOIN reward_history rh ON o.order_no = rh.order_no
		WHERE order_status = 'OS003' AND user_id = #{userId}
	</select>
	
	<!-- 결제용 주문 요약 -->
	<select id="getOrder" parameterType="string" resultType="com.example.trade.dto.Order">
	    SELECT 
	        o.order_no AS orderNo,
	        u.name AS name,
	        MAX(o.product_name) AS productName,
	        SUM(o.price * o.order_quantity) AS totalPrice
	    FROM `order` o
		LEFT JOIN `user` u ON o.user_id = u.id
	    WHERE o.order_no = #{orderNo}
	    GROUP BY o.order_no, u.name
	</select>
	
	<!-- 총 결제 금액 -->
	<select id="getTotalPrice" parameterType="string" resultType="int">
	    SELECT SUM(o.price * o.order_quantity)
	    FROM `order` o
	    WHERE o.order_no = #{orderNo}
	</select>
	
	<!-- 주문 번호로 사용자 ID 조회 -->
	<select id="getUserIdByOrderNo" parameterType="string" resultType="string">
	    SELECT user_id
	    FROM `order`
	    WHERE order_no = #{orderNo}
	    LIMIT 1
	</select>
	
	<!-- 주문번호의 첫 번째 상품명 조회(대표 상품 표기용) -->
	<select id="getFirstProductName" parameterType="string" resultType="string">
	    SELECT product_name
	    FROM `order`
	    WHERE order_no = #{orderNo}
	    LIMIT 1
	</select>
	<!-- 주문번호의 아이템(행) 개수 조회 -->
	<select id="getOrderItemCount" parameterType="string" resultType="int">
	    SELECT COUNT(*)
	    FROM `order`
	    WHERE order_no = #{orderNo}
	</select>
	
	<!-- 사용자 ID로 간단한 주문 목록 조회(요약 필드만) -->
	<select id="getOrderListByUserId" resultType="com.example.trade.dto.Order">
	    SELECT
	        order_no AS orderNo,
	        user_id AS userId,
	        product_name AS productName,
	        option_name AS optionName,
	        option_name_value AS optionNameValue,
	        order_quantity AS orderQuantity,
	        price
	    FROM `order`
	    WHERE user_id = #{userId}
	    ORDER BY order_no
	</select>
	
	<!-- 주문 상세(수령인/주소/상품/결제정보) 조회 -->
	<select id="selectOrderDetailByOrderNo" resultType="com.example.trade.dto.Order">
	    SELECT 
	        o.order_no AS orderNo,
	        o.sub_order_no AS subOrderNo,
	        o.user_id AS userId,
	
	        u.name AS name,
	        u.phone AS phone,
	        
	        a.address AS address,
	        a.detail_address AS detailAddress,
	        a.postal AS postal,
	
	        o.product_name AS productName,
	        o.option_name AS optionName,
	        o.option_name_value AS optionNameValue,
	        o.order_quantity AS orderQuantity,
	        o.price AS price,
	        (o.price * o.order_quantity) AS totalPrice,
	
	        o.order_time AS orderTime,
	        o.delivery_request AS deliveryRequest,
	        o.payment_type AS paymentType
	    FROM `order` o
	    INNER JOIN address a ON o.address_no = a.address_no
	    INNER JOIN `user` u ON a.user_id = u.id
	    WHERE o.order_no = #{orderNo}
	</select>
	
	<!-- 배송 요청사항 입력 -->
	<update id="updateDeliveryRequest">
		UPDATE `order`
			SET delivery_request = #{deliveryRequest}
		WHERE order_no = #{orderNo}
	</update>
	
	<!-- 결제 시 사용 된 적립금 입력 -->
	<insert id="insertUsedPoint">
		INSERT INTO reward_history(
			order_no, reward_use
		) VALUES (
			#{orderNo}, #{rewardUse}
		)	
	</insert>
	
	<!-- 결제 방식 입력 -->
	<update id="savePaymentMethod">
		UPDATE `order`
			SET payment_type = #{methodKor}
			,payment_time = NOW()
		WHERE order_no = #{orderNo}
	</update>
</mapper>