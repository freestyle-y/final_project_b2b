<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.trade.mapper.AdminMapper">
	<!-- 자주 묻는 질문(FAQ) 목록 -->
	<select id="selectFAQList" resultType="map">
		SELECT
			board_no AS boardNo,
			board_title AS boardTitle,
			board_content AS boardContent,
			create_user AS createUser,
			create_date AS createDate,
			update_user AS updateUser,
			update_date AS updateDate,
			use_status AS useStatus,
			view_count AS viewCount
		FROM board
		WHERE board_code = 'BC001'
		ORDER BY board_no DESC
	</select>
	
	<!-- 자주 묻는 질문(FAQ) 전체 행 수 조회 -->
	<select id="selectFAQTotalCount" parameterType="com.example.trade.dto.Page" resultType="int">
		SELECT COUNT(*)
		FROM board
		WHERE board_code = 'BC001'
		<if test="searchWord != null and searchWord != ''">
			AND board_title LIKE CONCAT('%', #{searchWord}, '%')
		</if>
	</select>
	
	<!-- 자주 묻는 질문(FAQ) 상세 조회 -->
	<select id="selectFAQOne" parameterType="com.example.trade.dto.Board" resultType="com.example.trade.dto.Board">
		SELECT
			board_no AS boardNo,
			board_title AS boardTitle,
			board_content AS boardContent,
			create_user AS createUser,
			create_date AS createDate,
			update_user AS updateUser,
			update_date AS updateDate,
			use_status AS useStatus,
			view_count AS viewCount
		FROM board
		WHERE board_no = #{boardNo}
	</select>
	
	<!-- 자주 묻는 질문(FAQ) 등록 -->
	<insert id="insertBoard" parameterType="com.example.trade.dto.Board" useGeneratedKeys="true" keyProperty="boardNo">
	INSERT INTO board
		(board_title, board_content, board_code, create_user)
	VALUES
		(#{boardTitle}, #{boardContent}, #{boardCode}, #{createUser})
	</insert>
	
	<!-- FAQ 수정 -->
	<update id="updateBoard" parameterType="com.example.trade.dto.Board">
		UPDATE board SET
			board_title = #{boardTitle},
			board_content = #{boardContent},
			update_user = #{updateUser},
			update_date = NOW(),
			use_status = #{useStatus}
		WHERE board_no = #{boardNo}
	</update>
	
	<!-- FAQ 삭제 -->
	<update id="deleteBoard" parameterType="com.example.trade.dto.Board">
		UPDATE board SET
			update_user = #{updateUser},
			update_date = NOW(),
			use_status = 'N'
		WHERE board_no = #{boardNo}
	</update>

	<!-- QNA 목록 조회 -->
	<select id="selectQNAListById" resultType="map">
		SELECT
			b.board_no AS boardNo,
			b.board_title AS boardTitle,
			b.board_content AS boardContent,
			b.create_user AS createUser,
			b.create_date AS createDate,
			b.update_user AS updateUser,
			b.update_date AS updateDate,
			b.use_status AS useStatus,
			b.view_count AS viewCount,
			IFNULL(t.commentCount, 0) AS commentCount
		FROM board b LEFT JOIN (SELECT board_no, COUNT(*) AS commentCount
								FROM comment
								WHERE use_status = 'Y'
								GROUP BY board_no) t ON b.board_no = t.board_no
		WHERE b.board_code = 'BC002'
		ORDER BY b.board_no DESC
	</select>
	
	<!-- 미응답 QNA 수 조회 -->
	<select id="selectNoCommentQnaCount" resultType="int">
		SELECT
			COUNT(IFNULL(t.commentCount, 0)) AS noCommentCount
		FROM board b LEFT JOIN (SELECT board_no, COUNT(*) AS commentCount
								FROM comment
								GROUP BY board_no) t ON b.board_no = t.board_no
		WHERE b.board_code = 'BC002'
	</select>
	
	<!-- QNA 목록 전체 행 수 조회 -->
	<select id="selectQNATotalCount" parameterType="com.example.trade.dto.Page" resultType="int">
		SELECT COUNT(*)
		FROM board
		WHERE board_code = 'BC002'
		<if test="searchWord != null and searchWord != ''">
			AND board_title LIKE CONCAT('%', #{searchWord}, '%')
		</if>
	</select>
	
	<!-- QNA 상세 조회 -->
	<select id="selectQNAOne" parameterType="com.example.trade.dto.Board" resultType="map">
		SELECT
			board_no AS boardNo,
			board_title AS boardTitle,
			board_content AS boardContent,
			board_code AS boardCode,
			create_user AS createUser,
			create_date AS createDate,
			update_user AS updateUser,
			update_date AS updateDate,
			use_status AS useStatus,
			view_count AS viewCount
		FROM board
		WHERE board_no = #{boardNo}
		AND board_code = 'BC002'
	</select>
	
	<!-- 댓글 조회 -->
	<select id="selectCommentByBoardNo" parameterType="int" resultType="map">
		SELECT
			comment_no AS commentNo,
			parent_comment_no AS parentCommentNo,
			comment_content AS commentContent,
			board_no AS boardNo,
			create_user AS createUser,
			create_date AS createDate,
			update_user AS updateUser,
			update_date AS updateDate,
			use_status AS useStatus
		FROM comment
		WHERE board_no = #{boardNo}
		AND use_status = 'Y'
		ORDER BY COALESCE(parent_comment_no, comment_no), comment_no
	</select>
	
	<!-- 댓글 등록 -->
	<insert id="insertComment" parameterType="com.example.trade.dto.Comment">
		INSERT INTO comment (
			parent_comment_no, comment_content, board_no, create_user
		)
		VALUES (
			#{parentCommentNo}, #{commentContent}, #{boardNo}, #{createUser}
		)
	</insert>
	
	<!-- 댓글 수정 -->
	<update id="updateComment" parameterType="com.example.trade.dto.Comment">
		UPDATE comment SET
			comment_content = #{commentContent},
			update_user = #{updateUser},
			update_date = NOW()
		WHERE comment_no = #{commentNo}
		AND board_no = #{boardNo}
		AND use_status = 'Y'
	</update>
	
	<!-- 댓글 삭제 -->
	<update id="deleteComment">
		UPDATE comment SET
			update_user = #{updateUser},
			update_date = NOW(),
			use_status = 'N'
		WHERE comment_no = #{commentNo}
		AND board_no = #{boardNo}
		AND create_user = #{updateUser}
	</update>
	
	<!-- 공지사항 목록 조회 -->
	<select id="selectNoticeList" resultType="map">
		SELECT
			board_no AS boardNo,
			board_title AS boardTitle,
			board_content AS boardContent,
			create_user AS createUser,
			create_date AS createDate,
			update_user AS updateUser,
			update_date AS updateDate,
			use_status AS useStatus,
			view_count AS viewCount
		FROM board
		WHERE board_code = 'BC003'
	</select>
	
	<!-- 공지사항 전체 행 수 조회 -->
	<select id="selectNoticeTotalCount" parameterType="com.example.trade.dto.Page" resultType="int">
		SELECT COUNT(*)
		FROM board
		WHERE board_code = 'BC003'
		<if test="searchWord != null and searchWord != ''">
			AND board_title LIKE CONCAT('%', #{searchWord}, '%')
		</if>
	</select>
	
	<!-- 공지사항 상세 조회 -->
	<select id="selectNoticeOne" parameterType="int" resultType="com.example.trade.dto.Board">
		SELECT
			board_no AS boardNo,
			board_title AS boardTitle,
			board_content AS boardContent,
			board_code AS boardCode,
			create_user AS createUser,
			create_date AS createDate,
			update_user AS updateUser,
			update_date AS updateDate,
			use_status AS useStatus,
			view_count AS viewCount
		FROM board
		WHERE board_no = #{boardNo}
	</select>
	
	<!-- 공지사항 등록 -->
	<update id="insertNotice" parameterType="com.example.trade.dto.Board" useGeneratedKeys="true" keyProperty="boardNo">
		INSERT INTO board (
			board_title, board_content, board_code, create_user
		) VALUES (
			#{boardTitle}, #{boardContent}, #{boardCode}, #{createUser}
		)
	</update>
	
	<!-- 공지사항 수정 -->
	<update id="updateNotice" parameterType="com.example.trade.dto.Board">
		UPDATE board SET
			board_title = #{boardTitle},
			board_content = #{boardContent},
			update_user = #{updateUser},
			update_date = NOW(),
			use_status = #{useStatus}
		WHERE board_no = #{boardNo}
		AND board_code = 'BC003'
	</update>
	
	<!-- 공지사항 삭제 -->
	<update id="deleteNotice" parameterType="com.example.trade.dto.Board">
		UPDATE board SET
			update_user = #{updateUser},
			update_date = NOW(),
			use_status = 'N'
		WHERE board_no = #{boardNo}
		AND board_code = 'BC003'
	</update>
	
	<!-- 로그인 이력 조회 -->
	<select id="selectLoginHistory" resultType="map">
		SELECT
			login_history_no AS loginHistoryNo,
			id,
			login_time AS loginTime
		FROM login_history
	</select>
	
	<!-- 알림 목록 조회 -->
	<select id="selectAlarmList" resultType="map">
		SELECT
			n.notification_no AS notificationNo,
			CASE n.target_type
				WHEN 'USER' THEN n.target_value
				WHEN 'ROLE' THEN ct.code_name
				WHEN 'ALL'  THEN '전체회원'
			END AS targetDisplay,
			
			CASE n.notification_type
				WHEN 'NC001' THEN '주문'
				WHEN 'NC002' THEN '배송'
				WHEN 'NC003' THEN '결제'
				WHEN 'NC004' THEN '이벤트'
				WHEN 'NC005' THEN '시스템'
				WHEN 'NC006' THEN '기타'
			END AS notificationType,
			
			n.notification_title AS notificationTitle,
			n.notification_content AS notificationContent,
			n.target_url AS targetUrl,
			n.image_url AS imageUrl,
			n.read_status AS readStatus,
			n.read_date AS readDate,
			n.create_user AS createUser,
			n.create_date AS createDate,
			n.update_user AS updateUser,
			n.update_date AS updateDate,
			n.use_status AS useStatus
		FROM notification n LEFT JOIN comm_tbl ct
		ON n.target_value = ct.code_number
	</select>
	
	<!-- 기업 회원의 배송 현황 조회 -->
	<select id="selectBizDeliveryList" resultType="map">
		SELECT
			c.contract_no AS contractNo,
			c.down_payment AS downPayment,
			CASE c.down_payment_status
				WHEN 'PS001' THEN '입금전'
				WHEN 'PS002' THEN '입금완료'
			END AS downPaymentStatus,
			c.down_payment_date AS downPaymentDate,
			c.final_payment AS finalPayment,
			CASE c.final_payment_status
				WHEN 'PS001' THEN '입금전'
				WHEN 'PS002' THEN '입금완료'
			END AS finalPaymentStatus,
			c.final_payment_date AS finalPaymentDate,
			CONCAT('(', a.postal, ') ', a.address, ' ', a.detail_address) AS address,
			CASE cd.contract_delivery_status
				WHEN 'DS001' THEN '배송대기'
				WHEN 'DS002' THEN '배송중'
				WHEN 'DS003' THEN '배송완료'
				WHEN 'DS004' THEN '반품대기'
				WHEN 'DS005' THEN '반품완료'
				WHEN 'DS006' THEN '교환대기'
				WHEN 'DS007' THEN '교환중'
				WHEN 'DS008' THEN '교환완료'
				WHEN 'DS009' THEN '상품회수'
			END AS contractDeliveryStatus,
			cd.contract_delivery_time AS contractDeliveryTime,
			ct.container_no AS containerNo,
			cd.contract_delivery_no AS contractDeliveryNo
		FROM contract c INNER JOIN quotation q ON c.quotation_no = q.quotation_no
		INNER JOIN (SELECT
						product_request_no,
						address_no,
						create_user
					FROM product_request
					GROUP BY product_request_no) t ON q.product_request_no = t.product_request_no
		INNER JOIN address a ON t.address_no = a.address_no
		INNER JOIN container ct ON c.contract_no = ct.contract_no
		LEFT JOIN contract_delivery cd ON ct.container_no = cd.container_no
		ORDER BY c.contract_no DESC
	</select>
	
	<!-- 개인 회원 배송 현황 조회 -->
	<select id="selectPersonalDeliveryList" resultType="map">
		SELECT 
			o.order_no AS orderNo,
			o.sub_order_no AS subOrderNo,
			o.product_name AS productName,
			o.option_name_value AS optionNameValue,
			o.order_quantity AS orderQuantity,
			o.price,
			ct1.code_name AS orderStatus,
			o.delivery_status AS deliveryStatusCode,
			ct2.code_name AS deliveryStatus,
			u.id AS userId,
			u.name AS userName,
			u.phone,
			a.address,
			a.detail_address AS detailAddress,
			a.postal
		FROM `order` o INNER JOIN `user` u ON o.user_id = u.id
		INNER JOIN `address` a ON o.address_no = a.address_no
		LEFT JOIN comm_tbl ct1 ON o.order_status = ct1.code_number
		LEFT JOIN comm_tbl ct2 ON o.delivery_status = ct2.code_number
		WHERE u.customer_category = 'CC003'
		ORDER BY o.order_no DESC
	</select>
	
	<!-- 개인 회원 배송 전체 행 수 조회 -->
	<select id="selectPersonalDeliveryTotalCount" parameterType="com.example.trade.dto.Page" resultType="int">
		SELECT COUNT(*)
		FROM `order` o INNER JOIN `user` u ON o.user_id = u.id
		INNER JOIN `address` a ON o.address_no = a.address_no
		LEFT JOIN comm_tbl ct1 ON o.order_status = ct1.code_number
		LEFT JOIN comm_tbl ct2 ON o.delivery_status = ct2.code_number
		WHERE u.customer_category = 'CC003'
		<if test="searchWord != null and searchWord != ''">
			AND (o.order_no LIKE CONCAT('%', #{searchWord}, '%')
			OR u.id LIKE CONCAT('%', #{searchWord}, '%'))
		</if>
	</select>
	
	<!-- 개인 회원 배송 처리 -->
	<update id="updatePersonalDelivery" parameterType="com.example.trade.dto.Order">
		UPDATE `order` SET
			delivery_status = #{deliveryStatus},
			update_user = #{updateUser},
			update_date = NOW()
		WHERE order_no = #{orderNo}
		AND sub_order_no = #{subOrderNo}
	</update>
	
	<!-- 기업 회원 배송 처리 -->
	<insert id="insertContractDelivery" parameterType="com.example.trade.dto.ContractDelivery" useGeneratedKeys="true" keyProperty="contractDeliveryNo">
			INSERT INTO contract_delivery (
				contract_delivery_status,
				container_no
			) VALUES (
				#{contractDeliveryStatus},
				#{containerNo}
			)
	</insert>
	
	<!-- 기존 배송 이력 조회(개인) -->
	<select id="getDeliveryHistory" parameterType="com.example.trade.dto.DeliveryHistory" resultType="com.example.trade.dto.DeliveryHistory">
		SELECT
			delivery_company AS deliveryCompany,
			tracking_no AS trackingNo
		FROM delivery_history
		WHERE order_no = #{orderNo}
		AND sub_order_no = #{subOrderNo}
	</select>
	
	<!-- 기존 배송 이력 조회(기업) -->
	<select id="getBizDeliveryHistory" parameterType="com.example.trade.dto.DeliveryHistory" resultType="com.example.trade.dto.DeliveryHistory">
		SELECT
			delivery_company AS deliveryCompany,
			tracking_no AS trackingNo
		FROM delivery_history
		WHERE contract_delivery_no = #{contractDeliveryNo}
	</select>
	
	<!-- 개인 회원 배송 이력 저장 -->
	<insert id="insertDeliveryHistory" parameterType="com.example.trade.dto.DeliveryHistory">
		INSERT INTO delivery_history (
			order_no, sub_order_no, delivery_company, tracking_no, delivery_status
		)
		VALUES (
			#{orderNo}, #{subOrderNo}, #{deliveryCompany}, #{trackingNo}, #{deliveryStatus}
		)
	</insert>
	
	<!-- 기업 회원 배송 이력 저장 -->
	<insert id="insertBizDeliveryHistory" parameterType="com.example.trade.dto.DeliveryHistory">
		INSERT INTO delivery_history (
			delivery_company, tracking_no, delivery_status, contract_delivery_no
		)
		VALUES (
			#{deliveryCompany}, #{trackingNo}, #{deliveryStatus}, #{contractDeliveryNo}
		)
	</insert>
	
	<!-- 기존 주문 조회 -->
	<select id="getOrderDetail" parameterType="com.example.trade.dto.Order" resultType="com.example.trade.dto.Order">
		SELECT
			order_no               AS orderNo,
			sub_order_no           AS subOrderNo,
			parent_sub_order_no    AS parentSubOrderNo,
			user_id                AS userId,
			address_no             AS addressNo,
			product_no             AS productNo,
			product_name           AS productName,
			option_no              AS optionNo,
			option_name            AS optionName,
			option_name_value      AS optionNameValue,
			order_quantity         AS orderQuantity,
			price                  AS price,
			return_quantity        AS returnQuantity,
			exchange_quantity      AS exchangeQuantity,
			order_status           AS orderStatus,
			delivery_status        AS deliveryStatus,
			create_user            AS createUser,
			use_status             AS useStatus
		FROM `order`
		WHERE order_no = #{orderNo}
		AND sub_order_no = #{subOrderNo}
	</select>
	
	<!-- 해당 주문의 다음 sub_order_no 계산 -->
	<select id="getNextSubOrderNo" parameterType="string" resultType="string">
		SELECT CAST(IFNULL(MAX(CAST(sub_order_no AS UNSIGNED)), 0) + 1 AS CHAR)
		FROM `order`
		WHERE order_no = #{orderNo}
	</select>
	
	<!-- 교환 주문 행 생성 -->
	<insert id="insertExchangeOrder" parameterType="com.example.trade.dto.Order">
		INSERT INTO `order` (
			order_no,
			sub_order_no,
			parent_sub_order_no,
			user_id,
			address_no,
			product_no,
			product_name,
			option_no,
			option_name,
			option_name_value,
			order_quantity,
			price,
			order_status,
			delivery_status,
			create_user,
			use_status
		) VALUES (
			#{orderNo},
			#{subOrderNo},
			#{parentSubOrderNo},
			#{userId},
			#{addressNo},
			#{productNo},
			#{productName},
			#{optionNo},
			#{optionName},
			#{optionNameValue},
			#{exchangeQuantity},
			#{price},
			#{orderStatus},
			#{deliveryStatus},
			#{createUser},
			#{useStatus}
		)
	</insert>
	
	<!-- 교환 완료 처리 -->
	<update id="updateExchangeComplete" parameterType="com.example.trade.dto.Order">
		UPDATE `order` SET
			delivery_status = #{deliveryStatus},
			exchange_end_time = NOW(),
			update_user = #{updateUser},
			update_date = NOW()
		WHERE order_no = #{orderNo}
		AND sub_order_no = #{subOrderNo}
	</update>
	
	<!-- 교환 거절 처리 -->
	<update id="updateExchangeReject" parameterType="com.example.trade.dto.Order">
		UPDATE `order` SET
			delivery_status = #{deliveryStatus},
			exchange_quantity = #{exchangeQuantity},
			exchange_reason = #{exchangeReason},
			exchange_request_time = #{exchangeRequestTime},
			update_user = #{updateUser},
			update_date = NOW()
		WHERE order_no = #{orderNo}
		AND sub_order_no = #{subOrderNo}
	</update>
	
	<!-- 반품 완료 처리 -->
	<update id="updateReturnComplete" parameterType="com.example.trade.dto.Order">
		UPDATE `order` SET
			delivery_status = #{deliveryStatus},
			return_end_time = NOW(),
			update_user = #{updateUser},
			update_date = NOW()
		WHERE order_no = #{orderNo}
		AND sub_order_no = #{subOrderNo}
	</update>
	
	<!-- 반품 거절 처리 -->
	<update id="updateReturnReject" parameterType="com.example.trade.dto.Order">
		UPDATE `order` SET
			delivery_status = #{deliveryStatus},
			return_quantity = #{returnQuantity},
			return_reason = #{returnReason},
			return_request_time = #{returnRequestTime},
			update_user = #{updateUser},
			update_date = NOW()
		WHERE order_no = #{orderNo}
		AND sub_order_no = #{subOrderNo}
	</update>
	
	<!-- 기업 회원 배송 상태 변경 -->
	<update id="updateBizDelivery">
		UPDATE contract_delivery SET
			contract_delivery_status = #{contractDeliveryStatus}
		WHERE contract_delivery_no = #{contractDeliveryNo}
	</update>
	
	<!-- 로그인 이력 저장 -->
	<insert id="insertLoginHistory">
		INSERT INTO login_history
			(id, login_time)
		VALUES (#{userId}, NOW())
	</insert>
	
	<!-- 주문 시 사용한 적립금 조회 -->
	<select id="getRewardUseByOrder" parameterType="com.example.trade.dto.Order" resultType="int">
		SELECT
			rh.reward_use AS rewardUse
		FROM `order` o INNER JOIN reward_history rh ON o.order_no = rh.order_no
		WHERE o.order_no = #{orderNo}
		AND o.sub_order_no = #{subOrderNo}
	</select>
	
	<!-- 해당 주문의 전체 금액 조회 -->
	<select id="getTotalAmountByOrder" parameterType="com.example.trade.dto.Order" resultType="int">
		SELECT
			SUM(order_quantity * price) AS totalAmount
		FROM `order`
		WHERE order_no = #{orderNo}
		GROUP BY order_no
	</select>
	
	<!-- 해당 주문의 반품 금액 조회 -->
	<select id="getReturnAmountByOrder" parameterType="com.example.trade.dto.Order" resultType="int">
		SELECT
			(return_quantity * price) AS returnAmount
		FROM `order`
		WHERE order_no = #{orderNo}
		AND sub_order_no = #{subOrderNo}
	</select>
	
	<!-- 반품 시 적립금 원복 -->
	<insert id="refundReward" parameterType="com.example.trade.dto.RewardHistory">
		INSERT INTO reward_history
			(order_no, reward_use)
		VALUES (#{orderNo}, #{rewardUse})
	</insert>
</mapper>