<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.trade.mapper.UserMapper">

	<!-- Security 로그인용 회원 조회 -->
	<select id="findById" parameterType="string" resultType="com.example.trade.domain.UserDomain">
		SELECT
			id, password, customer_category AS customerCategory
		FROM user
		WHERE id = #{id}
	</select>
	
	<!-- 회원가입 삽입 -->
    <insert id="insertUser" parameterType="com.example.trade.dto.User">
	INSERT INTO user (
		id, password, customer_category, name, phone, sn, email, postal, address, detail_address,
		simple_password, create_user, create_date, update_user, update_date,
		company_name, business_no, total_reward, failed_login_count, customer_status
	) VALUES (
		#{id}, #{password}, #{customerCategory}, #{name}, #{phone}, #{sn}, #{email}, #{postal}, #{address}, #{detailAddress},
		#{simplePassword}, #{createUser}, NOW(), #{updateUser}, #{updateDate},
		#{companyName}, #{businessNo}, #{totalReward}, #{failedLoginCount}, #{customerStatus}
	)
    </insert>
    
    <!-- 중복가입 방지용 주민등록번호 조회 -->
   	<select id="findBySn">
   		SELECT
   			sn
   		FROM user
   		WHERE sn = #{sn} AND customer_category = #{customerCategory}
   	</select>
    
    <!-- 중복가입 방지용 사업자등록번호 조회 -->
   	<select id="findByBusinessNo">
   		SELECT
   			business_no AS businessNo
   		FROM user
   		WHERE business_no = #{businessNo} AND customer_category = #{customerCategory}
   	</select>
   	
	<!-- 회원 목록 조회 (검색 + 페이징) -->
	<select id="findUser" parameterType="map" resultType="com.example.trade.dto.User">
	    SELECT
	        id, customer_category AS customerCategory, name, phone, email,
	        company_name AS companyName, business_no AS businessNo,
	        total_reward AS totalReward, failed_login_count AS failedLoginCount,
	        customer_status AS customerStatus, create_date AS createDate
	    FROM user
	    WHERE 1=1
    	<if test="customerCategory != null and customerCategory != ''">
        	AND customer_category = #{customerCategory}
    	</if>
    	<if test="customerStatus != null and customerStatus != ''">
        	AND customer_status = #{customerStatus}
    	</if>
    	<if test="searchKeyword != null and searchKeyword != ''">
	        AND (
	            id LIKE CONCAT('%', #{searchKeyword}, '%')
	            OR name LIKE CONCAT('%', #{searchKeyword}, '%')
	            OR email LIKE CONCAT('%', #{searchKeyword}, '%')
	        )
    	</if>
		ORDER BY create_date DESC
		LIMIT #{offset}, #{pageSize}
	</select>

	<!-- 전체 회원 수 (페이징용) -->
	<select id="countUser" parameterType="map" resultType="int">
	    SELECT COUNT(*)
	    FROM user
	    WHERE 1=1
   		<if test="customerCategory != null and customerCategory != ''">
        	AND customer_category = #{customerCategory}
    	</if>
    	<if test="customerStatus != null and customerStatus != ''">
        	AND customer_status = #{customerStatus}
    	</if>
    	<if test="searchKeyword != null and searchKeyword != ''">
	        AND (
	            id LIKE CONCAT('%', #{searchKeyword}, '%')
	            OR name LIKE CONCAT('%', #{searchKeyword}, '%')
	            OR email LIKE CONCAT('%', #{searchKeyword}, '%')
	        )
    	</if>
	</select>


	<!-- 기업회원 가입 승인 (CS004 → CS001) -->
	<update id="approveUser" parameterType="string">
		UPDATE user
		SET customer_status = 'CS001',
			update_user = #{updateUser},
			update_date = NOW()
		WHERE id = #{id}
			AND customer_status = 'CS004'
			AND customer_category = 'CC002'
    </update>
    
    <!-- 회원 정보들 조회 -->
    <select id="getInfoById" parameterType="String" resultType="com.example.trade.dto.User">
    	SELECT
    		id, password, customer_category AS customerCategory, name, phone, sn, email, postal, address, 
    		detail_address AS detailAddress, simple_password AS simplePassword, company_name AS companyName, 
    		business_no AS businessNo, total_reward AS totalReward, customer_status AS customerStatus, create_date AS createDate
    	FROM user
    	WHERE id = #{id}
    </select>
    
    <!-- 회원정보 업데이트 -->
    <update id="updateUser" parameterType="com.example.trade.dto.User">
		UPDATE user
		<set>
			<if test="name != null">name = #{name},</if>
			<if test="phone != null">phone = #{phone},</if>
			<if test="email != null">email = #{email},</if>
			<if test="postal != null">postal = #{postal},</if>
			<if test="address != null">address = #{address},</if>
			<if test="detailAddress != null">detail_address = #{detailAddress},</if>
			<if test="simplePassword != null">simple_password = #{simplePassword},</if>
			<if test="companyName != null">company_name = #{companyName},</if>
		</set>
		WHERE id = #{id}
	</update>
	
	<!-- 비밀번호 변경 -->
	<update id="updatePw" parameterType="com.example.trade.dto.User">
		UPDATE user
		SET password = #{password}
		WHERE id = #{id}
	</update>
	
	<!-- 아이디 찾기 -->
	<select id="findIdBySn" parameterType="com.example.trade.dto.User" resultType="String">
		SELECT id
		FROM user
		WHERE name = #{name} AND sn = #{sn}
	</select>
	<select id="findIdByBusinessNo" parameterType="com.example.trade.dto.User" resultType="String">
		SELECT id
		FROM user
		WHERE company_name = #{companyName} AND business_no = #{businessNo}
	</select>
	
	<!-- 비밀번호 찾기 -->
	<select id="findPersonalUser" resultType="com.example.trade.dto.User">
    SELECT id, email 
    FROM user 
    WHERE customer_category = 'CC003'
      AND id = #{id}
      AND name = #{name}
      AND sn = #{sn}
	</select>
	
	<select id="findCompanyUser" resultType="com.example.trade.dto.User">
    SELECT id, email 
    FROM user 
    WHERE customer_category = 'CC002'
      AND id = #{id}
      AND company_name = #{companyName}
      AND business_no = #{businessNo}
	</select>
	
	<!-- 소셜로그인 -->
	<insert id="insertSocial" parameterType="com.example.trade.dto.SocialLogin">
        INSERT INTO social_login (user_id, social_type, social_id)
        VALUES (#{userId}, #{socialType}, #{socialId})
    </insert>

    <select id="findAllBySocialTypeAndSocialId" resultType="com.example.trade.dto.SocialLogin">
        SELECT social_login_no AS socialLoginNo, user_id AS userId, social_type AS socialType, social_id AS socialId 
		FROM social_login
        WHERE social_type = #{socialType}
          AND social_id = #{socialId}
    </select>

    <select id="findSocialByUserId" resultType="com.example.trade.dto.SocialLogin">
        SELECT social_login_no AS socialLoginNo, user_id AS userId, social_type AS socialType, social_id AS socialId 
        FROM social_login
        WHERE user_id = #{userId}
    </select>

    <delete id="deleteByUserIdAndSocialType">
        DELETE FROM social_login
        WHERE user_id = #{userId}
          AND social_type = #{socialType}
    </delete>
    
    <!-- 회원상태 수정 -->
	<update id="updateMemberStatus" parameterType="map">
		UPDATE user
		SET customer_status = #{customerStatus}, update_user = #{updateUser}, update_date = now()
		WHERE id = #{userId}
	</update>
	
</mapper>